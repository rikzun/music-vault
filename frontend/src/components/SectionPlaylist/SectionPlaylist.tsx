import { useEffect, useRef } from "react"
import "./SectionPlaylist.style.scss"
import axios from "axios"
import { PlaylistAtoms } from "@atoms/playlist"
import { Track } from "src/common/types"
import { UploadedPlaylistResponse } from "./SectionPlaylist.types"
import { PlayerAtoms } from "@atoms/player"
import { PlaylistTrack } from "@components/PlaylistTrack"

function Waveform(props: {data: number[]}) {
    const canvasRef = useRef<HTMLCanvasElementN>(null)
    const width = 510
    const height = 200
  
    useEffect(() => {
        const canvas = canvasRef.current!
        const ctx = canvas.getContext('2d')!
        ctx.clearRect(0, 0, width, height)
        
        if (!props.data) return
        
        const centerY = height / 2
        const barWidth = width / props.data.length
        
        ctx.beginPath()
        ctx.fillStyle = "red"

        props.data.forEach((value, index) => {
            const x = index * barWidth
            const y = centerY

            ctx.rect(x, y, barWidth, value)
            ctx.rect(x, y, barWidth, -value)
        })
        
        ctx.closePath()
        ctx.fill()

    }, [props.data])
  
    return (
        <canvas
            ref={canvasRef}
            width={width}
            height={height}
            style={{ 
                border: '1px solid #e5e7eb',
                borderRadius: '8px',
                backgroundColor: '#f9fafb'
            }}
        />
    )
}
  
const data= [
    0,
    31,
    7,
    0,
    -50,
    -18,
    0,
    -11,
    16,
    10,
    59,
    -40,
    42,
    -1,
    36,
    -7,
    -10,
    19,
    -15,
    12,
    -3,
    2,
    -9,
    -3,
    17,
    -17,
    33,
    -23,
    21,
    -7,
    15,
    -22,
    -30,
    -2,
    15,
    -12,
    -16,
    32,
    15,
    -9,
    -33,
    7,
    17,
    28,
    8,
    -26,
    -34,
    -12,
    6,
    0,
    5,
    -10,
    0,
    0,
    55,
    21,
    -22,
    -9,
    -11,
    -18,
    30,
    23,
    7,
    33,
    2,
    -7,
    -9,
    -9,
    -10,
    -4,
    -33,
    -7,
    42,
    7,
    21,
    -5,
    -1,
    -29,
    22,
    3,
    -13,
    -25,
    4,
    31,
    -2,
    18,
    0,
    -22,
    6,
    -22,
    -16,
    15,
    9,
    -18,
    0,
    2,
    0,
    15,
    29,
    -4,
    -1,
    -2,
    -22,
    3,
    3,
    -10,
    7,
    19,
    -9,
    -27,
    -19,
    -6,
    -14,
    12,
    -23,
    0,
    -7,
    -8,
    21,
    26,
    8,
    -40,
    -4,
    2,
    -3,
    0,
    7,
    3,
    -5,
    -4,
    -2,
    8,
    -1,
    -15,
    26,
    25,
    -18,
    4,
    -8,
    -11,
    -12,
    -1,
    -2,
    -35,
    20,
    25,
    8,
    -3,
    -11,
    27,
    -5,
    -26,
    15,
    29,
    -1,
    8,
    4,
    1,
    -1,
    6,
    -5,
    3,
    2,
    -3,
    -4,
    0,
    0,
    -5,
    6,
    -8,
    -7,
    -3,
    -24,
    -1,
    -4,
    -13,
    6,
    -3,
    34,
    -4,
    0,
    12,
    -10,
    -22,
    14,
    -8,
    9,
    20,
    -63,
    -23,
    -4,
    18,
    -23,
    13,
    -4,
    -18,
    6,
    13,
    6,
    -2,
    14,
    -11,
    19,
    29,
    12,
    -5,
    -1,
    -19,
    19,
    0,
    0,
    -42,
    -41,
    24,
    1,
    7,
    43,
    -45,
    -37,
    10,
    0,
    1,
    -18,
    8,
    -9,
    21,
    14,
    -29,
    -12,
    -27,
    -28,
    4,
    23,
    -29,
    8,
    1,
    22,
    34,
    -6,
    -5,
    -14,
    24,
    13,
    13,
    -7,
    -10,
    -41,
    -33,
    -4,
    20,
    11,
    0,
    -33,
    11,
    -19,
    -23,
    -11,
    -37,
    -38,
    21,
    -10,
    -11,
    1,
    -13,
    0,
    -5,
    -20,
    -20,
    12,
    43,
    -21,
    -19,
    37,
    -15,
    8,
    -6,
    10,
    -12,
    9,
    4,
    8,
    0,
    -23,
    -20,
    -19,
    -9,
    29,
    -17,
    7,
    -12,
    30,
    21,
    7,
    12,
    -5,
    -10,
    23,
    -1,
    2,
    0,
    5,
    30,
    7,
    11,
    -34,
    0,
    -36,
    -16,
    0,
    0,
    -17,
    23,
    14,
    6,
    -4,
    12,
    20,
    11,
    -8,
    3,
    -17,
    -17,
    14,
    1,
    8,
    -16,
    -25,
    -5,
    -21,
    5,
    2,
    7,
    -9,
    1,
    0,
    -29,
    17,
    14,
    -12,
    -3,
    -16,
    7,
    -38,
    8,
    13,
    25,
    13,
    5,
    16,
    -4,
    -2,
    -4,
    -1,
    0,
    -1,
    0,
    7,
    -4,
    11,
    -9,
    -19,
    -7,
    6,
    -12,
    6,
    16,
    24,
    -10,
    17,
    -13,
    -7,
    -35,
    -3,
    1,
    -13,
    38,
    22,
    29,
    62,
    13,
    0,
    0,
    -3,
    -3,
    1,
    -4,
    -5,
    -1,
    6,
    7,
    4,
    6,
    -7,
    -4,
    5,
    -6,
    -28,
    -26,
    -31,
    31,
    -7,
    -5,
    -7,
    24,
    21,
    -1,
    -1,
    5,
    -7,
    14,
    -2,
    -6,
    2,
    6,
    -32,
    -2,
    -28,
    -9,
    3,
    -14,
    -14,
    -14,
    23,
    -25,
    -14,
    -19,
    -20,
    5,
    8,
    -1,
    -10,
    -27,
    -27,
    -13,
    8,
    37,
    8,
    56,
    5,
    18,
    20,
    29,
    -14,
    -2,
    0,
    -7,
    -6,
    -52,
    -34,
    -2,
    3,
    -2,
    0,
    4,
    -18,
    27,
    52,
    -6,
    -6,
    -5,
    -6,
    -12,
    -10,
    30,
    -27,
    -8,
    -8,
    18,
    7,
    -8,
    7,
    1,
    -5,
    3,
    3,
    9,
    -12,
    5,
    1,
    0,
    0,
    0,
    -1,
    -1,
    -2,
    0,
    3,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0
  ]

export function SectionPlaylist() {
    const playlist = PlaylistAtoms.usePlaylistID()
    const currentTrack = PlayerAtoms.useCurrentTrack()
    const trackList = PlayerAtoms.useTracklist()

    useEffect(() => {
        axios.get<UploadedPlaylistResponse>("/playlist/uploaded").then((res) => {
            const trackMap = new Map<number, Track>()

            res.data.data.forEach((track) => {
                trackMap.set(track.id, track)
            })

            trackList.set(trackMap)
        }).catch((res) => {})
    }, [])

    return (
        <div className="section-playlist">
            <div className="container">
                {Array.from(trackList.value.values()).map((track) => (
                    <PlaylistTrack
                        key={track.id}
                        data={track}
                        onClick={() => currentTrack.set(track.id)}
                    />
                ))}
            </div>

            <Waveform data={data} />
        </div>
    )
}