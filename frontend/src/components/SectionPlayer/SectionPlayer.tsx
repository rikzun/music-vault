import { MdHideImage, MdPause, MdPlayArrow, MdRepeat, MdShuffle, MdSkipNext, MdSkipPrevious } from "react-icons/md"
import "./SectionPlayer.style.scss"
import { useState } from "@utils/hooks"
import { useEffect } from "react"
import { PlayerAtoms } from "@atoms/player"
import { VolumeAtoms } from "@atoms/volume"
import { Track } from "src/common/types"
import { TrackWaveform } from "@components/TrackWaveform"

const audioContext = new AudioContext()
const audioElement = new Audio()

const gainNode = audioContext.createGain()
const track = audioContext.createMediaElementSource(audioElement)
track.connect(gainNode).connect(audioContext.destination)
audioElement.crossOrigin = "anonymous"

export function SectionPlayer() {
    const currentTrack = PlayerAtoms.useCurrentTrack()
    const trackList = PlayerAtoms.useTracklist()
    const volume = VolumeAtoms.useVolume()
    const muted = VolumeAtoms.useMuted()
    
    const currentTrackData = useState<TrackN>(null)
    const isPlaying = useState<boolean>(false)

    useEffect(() => {
        if (!currentTrack.value) return
        
        const trackData = trackList.value.get(currentTrack.value)
        const audioURL = trackData?.audioURL
        if (!audioURL) return

        currentTrackData.set(trackData)
        audioElement.src = ENV.APP_URL + audioURL
    }, [currentTrack.value])

    useEffect(() => {
        audioElement.onended = onEnded
        audioElement.onpause = onPause
        audioElement.oncanplay = onCanPlay
        audioElement.onplay = onPlay
    }, [])

    useEffect(() => {
        gainNode.gain.value = muted.value ? 0 : volume.value * 0.01
    }, [volume.value, muted.value])

    const onPlayClick = () => {
        if (audioContext.state === "suspended") {
            audioContext.resume()
        }

        if (!audioElement.src) return

        if (isPlaying.value) {
            audioElement.pause()
        } else {
            audioElement.play()
        }

        isPlaying.invert()
    }

    const onEnded = () => {
        isPlaying.set(false)
    }

    const onPause = () => {
        isPlaying.set(false)
    }

    const onPlay = () => {
        isPlaying.set(true)
    }

    const onCanPlay = () => {
        onPlayClick()
    }

    const PlayStateButton = isPlaying.value ?  MdPause : MdPlayArrow

    return (
        <div className="section-player">
            <div className="track-data">
                {currentTrackData.value?.imageURL
                    ? <img className="cover" src={ENV.APP_URL + currentTrackData.value.imageURL} />
                    : <div className="cover cover__empty" children={<MdHideImage />} />
                }

                <div>{currentTrackData.value?.title ?? "No track"}</div>
                <div>{currentTrackData.value?.artists.map((artist) => artist.name).join(", ")}</div>
            </div>

            <TrackWaveform data={data} />

            <div className="control-btns">
                <MdShuffle size={36} />
                <MdSkipPrevious size={50} />
                <PlayStateButton size={50} onClick={onPlayClick} />
                <MdSkipNext size={50} />
                <MdRepeat size={36} />
            </div>
        </div>
    )
}

const data= [
    0,
    31,
    7,
    0,
    -50,
    -18,
    0,
    -11,
    16,
    10,
    59,
    -40,
    42,
    -1,
    36,
    -7,
    -10,
    19,
    -15,
    12,
    -3,
    2,
    -9,
    -3,
    17,
    -17,
    33,
    -23,
    21,
    -7,
    15,
    -22,
    -30,
    -2,
    15,
    -12,
    -16,
    32,
    15,
    -9,
    -33,
    7,
    17,
    28,
    8,
    -26,
    -34,
    -12,
    6,
    0,
    5,
    -10,
    0,
    0,
    55,
    21,
    -22,
    -9,
    -11,
    -18,
    30,
    23,
    7,
    33,
    2,
    -7,
    -9,
    -9,
    -10,
    -4,
    -33,
    -7,
    42,
    7,
    21,
    -5,
    -1,
    -29,
    22,
    3,
    -13,
    -25,
    4,
    31,
    -2,
    18,
    0,
    -22,
    6,
    -22,
    -16,
    15,
    9,
    -18,
    0,
    2,
    0,
    15,
    29,
    -4,
    -1,
    -2,
    -22,
    3,
    3,
    -10,
    7,
    19,
    -9,
    -27,
    -19,
    -6,
    -14,
    12,
    -23,
    0,
    -7,
    -8,
    21,
    26,
    8,
    -40,
    -4,
    2,
    -3,
    0,
    7,
    3,
    -5,
    -4,
    -2,
    8,
    -1,
    -15,
    26,
    25,
    -18,
    4,
    -8,
    -11,
    -12,
    -1,
    -2,
    -35,
    20,
    25,
    8,
    -3,
    -11,
    27,
    -5,
    -26,
    15,
    29,
    -1,
    8,
    4,
    1,
    -1,
    6,
    -5,
    3,
    2,
    -3,
    -4,
    0,
    0,
    -5,
    6,
    -8,
    -7,
    -3,
    -24,
    -1,
    -4,
    -13,
    6,
    -3,
    34,
    -4,
    0,
    12,
    -10,
    -22,
    14,
    -8,
    9,
    20,
    -63,
    -23,
    -4,
    18,
    -23,
    13,
    -4,
    -18,
    6,
    13,
    6,
    -2,
    14,
    -11,
    19,
    29,
    12,
    -5,
    -1,
    -19,
    19,
    0,
    0,
    -42,
    -41,
    24,
    1,
    7,
    43,
    -45,
    -37,
    10,
    0,
    1,
    -18,
    8,
    -9,
    21,
    14,
    -29,
    -12,
    -27,
    -28,
    4,
    23,
    -29,
    8,
    1,
    22,
    34,
    -6,
    -5,
    -14,
    24,
    13,
    13,
    -7,
    -10,
    -41,
    -33,
    -4,
    20,
    11,
    0,
    -33,
    11,
    -19,
    -23,
    -11,
    -37,
    -38,
    21,
    -10,
    -11,
    1,
    -13,
    0,
    -5,
    -20,
    -20,
    12,
    43,
    -21,
    -19,
    37,
    -15,
    8,
    -6,
    10,
    -12,
    9,
    4,
    8,
    0,
    -23,
    -20,
    -19,
    -9,
    29,
    -17,
    7,
    -12,
    30,
    21,
    7,
    12,
    -5,
    -10,
    23,
    -1,
    2,
    0,
    5,
    30,
    7,
    11,
    -34,
    0,
    -36,
    -16,
    0,
    0,
    -17,
    23,
    14,
    6,
    -4,
    12,
    20,
    11,
    -8,
    3,
    -17,
    -17,
    14,
    1,
    8,
    -16,
    -25,
    -5,
    -21,
    5,
    2,
    7,
    -9,
    1,
    0,
    -29,
    17,
    14,
    -12,
    -3,
    -16,
    7,
    -38,
    8,
    13,
    25,
    13,
    5,
    16,
    -4,
    -2,
    -4,
    -1,
    0,
    -1,
    0,
    7,
    -4,
    11,
    -9,
    -19,
    -7,
    6,
    -12,
    6,
    16,
    24,
    -10,
    17,
    -13,
    -7,
    -35,
    -3,
    1,
    -13,
    38,
    22,
    29,
    62,
    13,
    0,
    0,
    -3,
    -3,
    1,
    -4,
    -5,
    -1,
    6,
    7,
    4,
    6,
    -7,
    -4,
    5,
    -6,
    -28,
    -26,
    -31,
    31,
    -7,
    -5,
    -7,
    24,
    21,
    -1,
    -1,
    5,
    -7,
    14,
    -2,
    -6,
    2,
    6,
    -32,
    -2,
    -28,
    -9,
    3,
    -14,
    -14,
    -14,
    23,
    -25,
    -14,
    -19,
    -20,
    5,
    8,
    -1,
    -10,
    -27,
    -27,
    -13,
    8,
    37,
    8,
    56,
    5,
    18,
    20,
    29,
    -14,
    -2,
    0,
    -7,
    -6,
    -52,
    -34,
    -2,
    3,
    -2,
    0,
    4,
    -18,
    27,
    52,
    -6,
    -6,
    -5,
    -6,
    -12,
    -10,
    30,
    -27,
    -8,
    -8,
    18,
    7,
    -8,
    7,
    1,
    -5,
    3,
    3,
    9,
    -12,
    5,
    1,
    0,
    0,
    0,
    -1,
    -1,
    -2,
    0,
    3,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0
]
